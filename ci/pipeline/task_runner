import java.net.URI

def get_server(target) {
    if (target.equals("staging")) {return "web@gateway"}
    if (target.equals("testing")) {return "web@testing1"}
    if (target.equals("production")) {return "web@production1"}
    return ""
}

pipeline {
    agent any
    parameters {

        choice(name: 'TARGET', choices: ['-',
                                     'staging',
                                     'testing',
                                     'production',
                                     ])

        choice(name: 'TASK', choices: [
                                       'import_road_addresses',
                                       'recalculate_addresses',
                                       'update_unaddressed',
                                       'find_floating_road_addresses',
                                       'import_complementary_road_address',
                                       'update_road_addresses_geometry_no_complementary',
                                       'update_road_addresses_geometry',
                                       'update_project_link_SDO_GEOMETRY',
                                       'import_road_address_change_test_data',
                                       'apply_change_information_to_road_address_links',
                                       'update_road_address_link_source',
                                       'update_road_addresses_ely_and_road_type',
                                       'import_road_address_history',
                                       'fuse_multi_segment_road_addresses',
                                       'check_road_network',
                                       'check_lrm_position',
                                       'fuse_road_address_with_history',
                                       'import_road_names',
                                       'test_integration_api_all_municipalities'
                                       ])

    }

    options {
        buildDiscarder(logRotator(numToKeepStr: "25"))
        disableConcurrentBuilds()
    }

    stages {
        stage("Setup") {

            
            steps {
                    //get_server()
                    script {

                        def IMPORT_TABLE = 'VVH_TIEOSOITE_JOULUKUU2018'

                        def EXECUTION_TAGET =  {  if ($TARGET.equals("staging")) {return "web@gateway"}
                                                  if ($TARGET.equals("testing")) {return "web@testing1"}
                                                  if ($TARGET.equals("production")) {return "web@production1"}
                                                  return "" }

                        STAGE_RUN_TASK = [
                            "ssh ${server} cd /home/web/viite/current && echo YES |",
                             "/home/web/viite/current/./sbt",
                             "-Ddigiroad2.env=${EXECUTION_TAGET}",
                             "\'project digiroad2-viite\'",
                             "\'test:run-main fi.liikennevirasto.viite.util.DataFixture ${TASK} ${IMPORT_TABLE}\'"
                        ].join(" ")

                    }
            }
        }

        stage("Prepare") {
            steps {
                script {

                    def jenkins_uid = sh(returnStdout: true, script: "id -u").trim()

                    def build_args = [
                        "--build-arg http_proxy=${http_proxy}",
                        "--build-arg https_proxy=${http_proxy}",
                        "--build-arg no_proxy=${no_proxy}",
                        "--build-arg JENKINS_UID=${jenkins_uid}"
                    ].join(" ")

                    docker.build(
                         "viite-cap",
                         "${build_args} -f ci/docker/Dockerfile.ruby ci"
                    )
                }
            }
        }

        stage("Run Task") {
            agent {
                docker {
                    image "viite-cap"
                    reuseNode true
                }
            }
            steps {

                withCredentials([file(credentialsId: 'ssh_config', variable: 'SSH_CONFIG'),
                                 file(credentialsId: 'SSH_KNOWN_HOSTS', variable: 'KNOWN_HOSTS'),
                                 file(credentialsId: 'ID_RSA', variable: 'ID_RSA')]) {
                    sh "mkdir ~/.ssh/ && cp ${SSH_CONFIG} ~/.ssh/ && cp ${KNOWN_HOSTS} ~/.ssh/"
                    sh "cp ${ID_RSA} ~/.ssh/"
                }
                sh STAGE_RUN_TASK
            }
        }
    }

    post {
        always {
            deleteDir()
        }
    }
}