AWSTemplateFormatVersion: 2010-09-09
Description: Viite ECS Fargate service in private subnets. Outputs ALB.
Parameters:
  NetworkStackName:
    Type: String
    Description: Name of the network stack
  ApplicationName:
    Description: Name of the application (no whitespace or special characters)
    Type: String
  Environment:
    Description: "Environment of the application, that these resources are created for. Used when tagging the resources"
    Type: String
  Owner:
    Description: "Owner of the of application, that these resources are created for. Used when tagging the resources"
    Type: String
  Project:
    Description: "Project of the of application, that these resources are created for. Used when tagging the resources"
    Type: String
  ContainerTag:
    Type: String
    Description: Tag of the container
  ContainerPort:
    Type: Number
    Description: Port of the container
  TaskDefinitionForService:
    Type: String
    Description: Task definition for your service
  ApiGatewayUrl:
    Type: String
    Description: ApiGateWay Url
  RepositoryURI:
    Type: String
    Description: URI to repository, where the container is
Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join ['-', [!Ref Environment,!Ref ApplicationName, 'ECS-Cluster-Private']]
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref Environment,!Ref ApplicationName, 'ECS-Cluster']]
        - Key: Environment
          Value: !Ref Environment
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project

  ECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', ['/ecs/',!Ref Environment,'-', !Ref ApplicationName, '-ECS-logs']]
      RetentionInDays: 14

  # This is a role which is used by the ECS tasks themselves.
  ECSTaskExecutionRoleForViiteQA:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Allow the ECS Tasks to download images from ECR
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'

                  # Allow the ECS tasks to upload logs to CloudWatch
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
#  Outputs:
#    ECSTaskExecutionRoleForViiteQA:
#      Description: ECSTaskExecutionRoleForViiteQA
#      Value: !GetAtt ECSTaskExecutionRoleForViiteQA.Arn

#  ECSTask:
#    Type: AWS::ECS::TaskDefinition
#    DependsOn: ECSLogGroup
#    Properties:
#      Family: !Join ['-', [!Ref Environment, !Ref ApplicationName]]
#      # Adjust these according to the needs of your applications containers
#      Cpu: 2048
#      Memory: 4096
#      ExecutionRoleArn: !GetAtt ECSTaskExecutionRoleForViiteQA.Arn
#      # TaskRoleArn: # Enable and create this role, if your container needs access to other AWS services like SQS, SES, DynamoDB etc.
#      NetworkMode: awsvpc # This is the only possible option with Fargate mode, but set here to remind of this behaviour
#      RequiresCompatibilities:
#        - FARGATE
#      ContainerDefinitions:
#        # First container. You can add several containers to one task. You would probably only add sidecar containers though
#        - Name: !Ref ApplicationName
#          Image: !Join [':', [!Ref RepositoryURI, !Ref ContainerTag]]
#          PortMappings:
#            - ContainerPort: !Ref ContainerPort
#          # If you want to pass environment variables to the container, uncomment and modify these:
#          # Environment:
#          #   - Name: REGION
#          #     Value: !Ref AWS::Region
#          Essential: true # One of the container need to be essential. So, if you'd add another container in this task, it's Essential -value should be false.
#          LogConfiguration:
#            LogDriver: awslogs
#            Options:
#              awslogs-group: !Ref ECSLogGroup
#              awslogs-region: !Ref "AWS::Region"
#              awslogs-stream-prefix: ecs
#          # Adjust this according to the need of your container
#          #Memory: 512
#      Tags:
#        - Key: Name
#          Value: !Join ['-', [!Ref ApplicationName, 'ECS-Task']]
#        - Key: Environment
#          Value: !Ref Environment
#        - Key: Owner
#          Value: !Ref Owner
#        - Key: Project
#          Value: !Ref Project

  PrivateLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 30
        - Key: routing.http2.enabled
          Value: true
      Subnets:
        - Fn::ImportValue:
            !Join ['-', [!Ref NetworkStackName, 'Subnet1-Id']]
        - Fn::ImportValue:
            !Join ['-', [!Ref NetworkStackName, 'Subnet2-Id']]
      SecurityGroups: [!Ref LoadBalancerSecurityGroup]
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref Environment,!Ref ApplicationName, 'LoadBalancer']]
        - Key: Environment
          Value: !Ref Environment
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project

  PrivateLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - PrivateLoadBalancer
      - TargetGroup
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: 'forward'
      LoadBalancerArn: !Ref PrivateLoadBalancer
      Port: 80
      Protocol: HTTP

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: PrivateLoadBalancer
    Properties:
      HealthCheckIntervalSeconds: 300
      HealthCheckPath: /  # If you have a more sophisticated container health check endpoint, add its path here
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      TargetType: ip
      Name: !Join ['-', [!Ref Environment,!Ref ApplicationName, 'TargetGroup']]
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 10
      VpcId:
        Fn::ImportValue:
          !Join ['-', [!Ref NetworkStackName, 'VPC-Id']]
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref Environment,!Ref ApplicationName, 'LoadBalancer-TargetGroup']]
        - Key: Environment
          Value: !Ref Environment
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project

  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn: PrivateLoadBalancerListener
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'TargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: ['*']
      ListenerArn: !Ref PrivateLoadBalancerListener
      Priority: 3

  BlockUserFromUsingExternalAPI:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn: PrivateLoadBalancerListener
    Properties:
      Actions:
        - FixedResponseConfig:
            ContentType: 'text/html'
            MessageBody: 'Selaink&auml;ytt&ouml; on nyky&auml;&auml;n estetty. Voit k&auml;ytt&auml;&auml; palvelua devapi.testivaylapilvi.fi'
            StatusCode: '403'
          Type: 'fixed-response'
      Conditions:
        - Field: path-pattern
          Values: [ '/externalApi/*' ]
      ListenerArn: !Ref PrivateLoadBalancerListener
      Priority: 2

  AllowApiGateway:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn: PrivateLoadBalancerListener
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'TargetGroup'
          Type: 'forward'
      Conditions:
        - Field: host-header
          Values: [ !Ref ApiGatewayUrl ]
      ListenerArn: !Ref PrivateLoadBalancerListener
      Priority: 1

  EcsService:
    Type: AWS::ECS::Service
    DependsOn:
      - ECSCluster
      - TargetGroup
      - PrivateLoadBalancerListener
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: !Join ['-', [!Ref Environment,!Ref ApplicationName, 'ECS-Service-Private']]
      DesiredCount: 2
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref WebServiceSecurityGroup
          Subnets:
            - Fn::ImportValue:
                !Join ['-', [!Ref NetworkStackName, 'Subnet1-Id']]
            - Fn::ImportValue:
                !Join ['-', [!Ref NetworkStackName, 'Subnet2-Id']]
      LaunchType: FARGATE
      TaskDefinition: !Ref TaskDefinitionForService
      LoadBalancers:
        - ContainerName: !Ref ApplicationName
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref Environment,!Ref ApplicationName, 'ECS-Service']]
        - Key: Environment
          Value: !Ref Environment
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project

  #The security group, that is protecting the load balancer.
  #This probably will allow traffic from the TGW
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['-', [!Ref Environment,!Ref ApplicationName, 'LoadBalancerSecurityGroup']]
      GroupName: !Join ['-', [!Ref Environment,!Ref ApplicationName, 'LoadBalancerSecurityGroup']]
      SecurityGroupIngress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
        - IpProtocol: "-1"
          CidrIpv6: ::/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          DestinationSecurityGroupId: !Ref WebServiceSecurityGroup
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          DestinationSecurityGroupId: !Ref WebServiceSecurityGroup
      Tags:
        - Key: Name
          Value: !Join [ '-', [!Ref Environment, !Ref ApplicationName, 'LoadBalancer-Security-Group' ] ]
        - Key: Environment
          Value: !Ref Environment
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project
      VpcId:
        Fn::ImportValue:
          !Join [ '-', [ !Ref NetworkStackName, 'VPC-Id' ] ]

  #The security group, that is protecting the containers.
  #This probably will allow traffic only from the VPC
  WebServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow inbound to port 80 and 5432, Outbound to everything
      GroupName: !Join ['-', [!Ref Environment,!Ref ApplicationName, 'WebServiceSecurityGroup']]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIpv6: ::/0
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          CidrIpv6: ::/0
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref Environment,!Ref ApplicationName, 'WebService-Security-Group' ] ]
        - Key: Environment
          Value: !Ref Environment
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project
      VpcId:
        Fn::ImportValue:
          !Join [ '-', [ !Ref NetworkStackName, 'VPC-Id' ] ]

  # Creates CNAME record "alb.<accountName>.vaylapilvi.aws" that points to alb-1234567.eu-west-1.elb.amazonaws.com
  ViiteCnameRecordToRoute53:
    Type: Custom::VaylapilviRoute53Record
    Properties:
      ServiceToken: arn:aws:sns:eu-west-1:434599271542:Vaylapilvi-Route53-Record
      Type: CNAME
      Name: !Ref CName
      Records:
        - !GetAtt PrivateLoadBalancer.DNSName
      Comment: Application load balancer

Outputs:
  ALBDNSName:
    Description: DNSname for the private Application Load Balancer
    Value: !GetAtt PrivateLoadBalancer.DNSName
