-- A script to import table data from devtest to drkeh.
-- Does not update existing rows.
-- Requires datalink:  DEVTESTLINK
--  Use admin to create if not exists e.g.
--      CREATE [PUBLIC] DATABASE LINK devtestLink CONNECT TO ... IDENTIFIED BY ... USING ...;
-- Usage: Change variables in BEGIN block as required.


CREATE OR REPLACE TYPE TABLE_OF_NUM_TYPE 			 IS TABLE OF NUMBER;

	-- Disable logging for perforamnce
	ALTER TABLE ROADWAY				NOLOGGING;
	ALTER TABLE ROAD_NAME 			NOLOGGING;
	ALTER TABLE LINK				NOLOGGING;
	ALTER TABLE LINEAR_LOCATION 	NOLOGGING;
	ALTER TABLE ROADWAY_POINT 		NOLOGGING;
	ALTER TABLE CALIBRATION_POINT	NOLOGGING;
	ALTER TABLE NODE 				NOLOGGING;
	ALTER TABLE JUNCTION_POINT 		NOLOGGING;
	ALTER TABLE JUNCTION 			NOLOGGING;
	ALTER TABLE NODE_POINT 			NOLOGGING;

	-- Disable fk constraint
	ALTER TABLE JUNCTION_POINT 		DISABLE constraint JUNCTION_POINT_FK1;

DECLARE
	ROADWAY_NUMBERS 	TABLE_OF_NUM_TYPE;
	LINK_IDS			TABLE_OF_NUM_TYPE;
	ROADWAY_POINT_IDs	TABLE_OF_NUM_TYPE;
	NODE_numbers_1 		TABLE_OF_NUM_TYPE;
	NODE_numbers_2 		TABLE_OF_NUM_TYPE;
	NODE_numbers 		TABLE_OF_NUM_TYPE;

	ROADNUMBER NUMBER;
	ROADPARTNUMBER NUMBER;
	WITHHISTORY BOOLEAN;
	OUTPUTIDSTOCONSOLE BOOLEAN;

BEGIN
	ROADNUMBER := 16267;
	ROADPARTNUMBER := 1;
	WITHHISTORY := FALSE;
	OUTPUTIDSTOCONSOLE := FALSE;


  IF WITHHISTORY THEN
    -- Collect associated roadway numbers to the road and the road part number
	SELECT DISTINCT ROADWAY_NUMBER BULK COLLECT INTO ROADWAY_NUMBERS FROM ( SELECT DISTINCT /*+DRIVING_SITE(R_D)*/ ROADWAY_NUMBER
		FROM ROADWAY@DEVTESTLINK R_D WHERE R_D.ROAD_NUMBER = ROADNUMBER AND R_D.ROAD_PART_NUMBER = ROADPARTNUMBER);

	-- Collect ROADWAY_POINT_IDs from CALIBRATION_POINT for Node_points
	select id BULK COLLECT INTO ROADWAY_POINT_IDs FROM (select DISTINCT /*+DRIVING_SITE(R_D)*/ id
		FROM ROADWAY_POINT@DEVTESTLINK R_D WHERE R_D.roadway_number IN (SELECT * FROM TABLE (ROADWAY_NUMBERS))); --MINUS SELECT id FROM ROADWAY_POINT

	-- Collect link_ids from linear_locations for link query
	SELECT LINK_ID BULK COLLECT INTO LINK_IDS FROM (SELECT DISTINCT LINK_ID
		FROM LINEAR_LOCATION@DEVTESTLINK WHERE ROADWAY_NUMBER IN (SELECT * FROM TABLE (ROADWAY_NUMBERS)) MINUS SELECT LINK_ID FROM LINEAR_LOCATION);

	-- Collect NODE_NUMBERs from NODE_POINT for Junction
	SELECT NODE_NUMBER BULK COLLECT INTO NODE_numbers_1 FROM (SELECT DISTINCT NODE_NUMBER
		FROM NODE_POINT@DEVTESTLINK WHERE ROADWAY_POINT_ID IN (SELECT * FROM TABLE (ROADWAY_POINT_IDs)) MINUS SELECT NODE_NUMBER FROM NODE_POINT);

	SELECT NODE_NUMBER BULK COLLECT INTO NODE_numbers_2 FROM (SELECT DISTINCT NODE_NUMBER
		FROM (SELECT node_number FROM JUNCTION@DEVTESTLINK WHERE id IN (
		SELECT junction_id FROM JUNCTION_POINT@DEVTESTLINK WHERE ROADWAY_POINT_ID IN (SELECT * FROM TABLE (ROADWAY_POINT_IDs))) ));

	NODE_numbers := NODE_numbers_1 MULTISET UNION DISTINCT NODE_numbers_2;

  ELSE

  	 DBMS_OUTPUT.PUT_LINE( 'Using without history to fetch roadwaynumbers.' );
  	SELECT DISTINCT ROADWAY_NUMBER BULK COLLECT INTO ROADWAY_NUMBERS FROM ( SELECT DISTINCT /*+DRIVING_SITE(R_D)*/ ROADWAY_NUMBER
		FROM ROADWAY@DEVTESTLINK R_D WHERE R_D.ROAD_NUMBER = ROADNUMBER AND R_D.ROAD_PART_NUMBER = ROADPARTNUMBER AND R_D.valid_to IS NULL AND R_D.END_DATE IS NULL);  --MINUS SELECT ROADWAY_NUMBER FROM ROADWAY

	-- Collect ROADWAY_POINT_IDs from CALIBRATION_POINT for Node_points
	select id BULK COLLECT INTO ROADWAY_POINT_IDs FROM (select DISTINCT  /*+DRIVING_SITE(R_D)*/ id
		FROM ROADWAY_POINT@DEVTESTLINK R_D WHERE R_D.roadway_number IN (SELECT * FROM TABLE (ROADWAY_NUMBERS)));-- MINUS SELECT id FROM ROADWAY_POINT

	-- Collect link_ids from linear_locations for link query
	SELECT LINK_ID BULK COLLECT INTO LINK_IDS FROM (SELECT DISTINCT /*+DRIVING_SITE(R_D)*/ LINK_ID
		FROM LINEAR_LOCATION@DEVTESTLINK R_D WHERE R_D.ROADWAY_NUMBER IN (SELECT * FROM TABLE (ROADWAY_NUMBERS)) AND R_D.valid_to IS NULL MINUS SELECT LINK_ID FROM LINEAR_LOCATION);

	-- Collect NODE_NUMBERs from NODE_POINT for Junction
	SELECT NODE_NUMBER BULK COLLECT INTO NODE_numbers_1 FROM (SELECT DISTINCT /*+DRIVING_SITE(R_D)*/ NODE_NUMBER
		FROM NODE_POINT@DEVTESTLINK R_D WHERE R_D.ROADWAY_POINT_ID IN (SELECT * FROM TABLE (ROADWAY_POINT_IDs))  AND R_D.valid_to IS NULL); --MINUS SELECT NODE_NUMBER FROM NODE_POINT
	DBMS_OUTPUT.PUT_LINE( 'n: ' || ROADWAY_POINT_IDs.count );

	SELECT NODE_NUMBER BULK COLLECT INTO NODE_numbers_2 FROM (SELECT DISTINCT NODE_NUMBER
		FROM (SELECT node_number FROM JUNCTION@DEVTESTLINK WHERE id IN (
		SELECT junction_id FROM JUNCTION_POINT@DEVTESTLINK WHERE ROADWAY_POINT_ID IN (SELECT * FROM TABLE (ROADWAY_POINT_IDs)))  AND valid_to IS NULL AND END_DATE IS NULL));
	DBMS_OUTPUT.PUT_LINE( 'n: ' || ROADWAY_POINT_IDs.count );

	NODE_numbers := NODE_numbers_1 MULTISET UNION DISTINCT NODE_numbers_2;
  END IF;



	INSERT  INTO ROADWAY			SELECT /*+DRIVING_SITE(R_D)*/ * FROM			ROADWAY@DEVTESTLINK R_D  WHERE R_D.ROADWAY_NUMBER 	IN (SELECT * FROM TABLE (ROADWAY_NUMBERS) MINUS SELECT ROADWAY_NUMBER FROM ROADWAY);
	INSERT	INTO LINK				SELECT /*+DRIVING_SITE(R_D)*/ * FROM               LINK@DEVTESTLINK L_D  WHERE L_D.id 				IN (SELECT * FROM TABLE (LINK_IDS)) 		AND NOT EXISTS (SELECT * FROM LINK WHERE LINK.id = L_D.id@DEVTESTLINK);
	INSERT  INTO LINEAR_LOCATION	SELECT /*+DRIVING_SITE(R_D)*/ * FROM	LINEAR_LOCATION@DEVTESTLINK LL_D WHERE LL_D.ROADWAY_NUMBER	IN (SELECT * FROM TABLE (ROADWAY_NUMBERS) MINUS SELECT ROADWAY_NUMBER FROM LINEAR_LOCATION);
	INSERT  INTO ROADWAY_POINT  	SELECT /*+DRIVING_SITE(R_D)*/ * FROM      ROADWAY_POINT@DEVTESTLINK RP_D WHERE RP_D.ROADWAY_NUMBER IN (SELECT * FROM TABLE (ROADWAY_NUMBERS))	AND NOT EXISTS (SELECT * FROM ROADWAY_POINT	WHERE ROADWAY_POINT.id 	= RP_D.id@DEVTESTLINK);

IF WITHHISTORY THEN
	INSERT  INTO CALIBRATION_POINT	SELECT * FROM CALIBRATION_POINT@DEVTESTLINK3 WHERE ROADWAY_POINT_ID IN (SELECT * FROM TABLE (ROADWAY_POINT_IDs)) 	AND NOT EXISTS (SELECT * FROM CALIBRATION_POINT	WHERE CALIBRATION_POINT.id 	= 	 CALIBRATION_POINT.id@DEVTESTLINK3);
	INSERT  INTO NODE  				SELECT * FROM 		       NODE@DEVTESTLINK3 WHERE NODE_NUMBER 		IN (SELECT * FROM TABLE (NODE_numbers))			AND NOT EXISTS (SELECT * FROM NODE				WHERE NODE.id 				= 	 NODE.id@DEVTESTLINK3);
	INSERT  INTO JUNCTION_POINT		SELECT * FROM 	 JUNCTION_POINT@DEVTESTLINK3 WHERE ROADWAY_POINT_ID IN (SELECT * FROM TABLE (ROADWAY_POINT_IDs)) 	AND NOT EXISTS (SELECT * FROM JUNCTION_POINT	WHERE JUNCTION_POINT.id 	= 	 JUNCTION_POINT.id@DEVTESTLINK3);
	INSERT 	INTO JUNCTION			SELECT * FROM 		   JUNCTION@DEVTESTLINK3 WHERE NODE_NUMBER 		IN (SELECT * FROM TABLE (NODE_numbers)) 		AND NOT EXISTS (SELECT * FROM JUNCTION			WHERE JUNCTION.id 			= 	 JUNCTION.id@DEVTESTLINK3);
	INSERT  INTO NODE_POINT			SELECT * FROM 		 NODE_POINT@DEVTESTLINK3 WHERE ROADWAY_POINT_ID IN (SELECT * FROM TABLE (ROADWAY_POINT_IDs))  	AND NOT EXISTS (SELECT * FROM NODE_POINT		WHERE NODE_POINT.id 		= 	 NODE_POINT.id@DEVTESTLINK3);
	INSERT  INTO ROAD_NAME 			SELECT * FROM		  ROAD_NAME@DEVTESTLINK3 WHERE ROAD_NUMBER = ROADNUMBER 										AND NOT EXISTS (SELECT * FROM ROAD_NAME			WHERE ROAD_NAME.id 			= 	 ROAD_NAME.id@DEVTESTLINK3);
ELSE
	INSERT  INTO CALIBRATION_POINT	SELECT * FROM CALIBRATION_POINT@DEVTESTLINK3 WHERE ROADWAY_POINT_ID IN (SELECT * FROM TABLE (ROADWAY_POINT_IDs)) 	AND valid_to IS NULL 						AND NOT EXISTS (SELECT * FROM CALIBRATION_POINT	WHERE CALIBRATION_POINT.id 	= CALIBRATION_POINT.id@DEVTESTLINK3);
	INSERT  INTO NODE  				SELECT * FROM 		       NODE@DEVTESTLINK3 WHERE NODE_NUMBER 		IN (SELECT * FROM TABLE (NODE_numbers))			AND valid_to IS NULL AND END_DATE IS NULL 	AND NOT EXISTS (SELECT * FROM NODE				WHERE NODE.id 				= NODE.id@DEVTESTLINK3);
	INSERT 	INTO JUNCTION			SELECT * FROM 		   JUNCTION@DEVTESTLINK3 WHERE NODE_NUMBER 		IN (SELECT * FROM TABLE (NODE_numbers))			AND valid_to IS NULL AND END_DATE IS NULL 	AND NOT EXISTS (SELECT * FROM JUNCTION			WHERE JUNCTION.id 			= JUNCTION.id@DEVTESTLINK3);
	INSERT  INTO JUNCTION_POINT		SELECT * FROM 	 JUNCTION_POINT@DEVTESTLINK3 WHERE ROADWAY_POINT_ID IN (SELECT * FROM TABLE (ROADWAY_POINT_IDs))	AND valid_to IS NULL 						AND NOT EXISTS (SELECT * FROM JUNCTION_POINT	WHERE JUNCTION_POINT.id 	= JUNCTION_POINT.id@DEVTESTLINK3);
	INSERT  INTO NODE_POINT			SELECT * FROM 		 NODE_POINT@DEVTESTLINK3 WHERE ROADWAY_POINT_ID IN (SELECT * FROM TABLE (ROADWAY_POINT_IDs))	AND valid_to IS NULL 						AND NOT EXISTS (SELECT * FROM NODE_POINT		WHERE NODE_POINT.id 		= NODE_POINT.id@DEVTESTLINK3);
	INSERT  INTO ROAD_NAME 			SELECT * FROM		  ROAD_NAME@DEVTESTLINK3 WHERE ROAD_NUMBER = ROADNUMBER											AND valid_to IS NULL AND END_DATE IS NULL	AND NOT EXISTS (SELECT * FROM ROAD_NAME			WHERE ROAD_NAME.id 			= ROAD_NAME.id@DEVTESTLINK3);
END IF;


IF OUTPUTIDSTOCONSOLE THEN
		DBMS_OUTPUT.PUT_LINE( 'ROADWAY_NUMBERS ---' );
	FOR Lcntr IN 1..ROADWAY_NUMBERS.count
	LOOP
	   DBMS_OUTPUT.PUT_LINE( ROADWAY_NUMBERS(Lcntr) );
	END LOOP;
		DBMS_OUTPUT.PUT_LINE( 'n: ' || ROADWAY_NUMBERS.count );

		DBMS_OUTPUT.PUT_LINE( 'LINK_IDS ---' );
	FOR Lcntr IN 1..LINK_IDS.count
	LOOP
	   DBMS_OUTPUT.PUT_LINE( LINK_IDS(Lcntr) );
	END LOOP;
		DBMS_OUTPUT.PUT_LINE( 'n: ' || LINK_IDS.count );

		DBMS_OUTPUT.PUT_LINE( 'ROADWAY_POINT_IDs ---' );
	FOR Lcntr IN 1..ROADWAY_POINT_IDs.count
	LOOP
	   DBMS_OUTPUT.PUT_LINE( ROADWAY_POINT_IDs(Lcntr) );
	END LOOP;
		DBMS_OUTPUT.PUT_LINE( 'n: ' || ROADWAY_POINT_IDs.count );

	DBMS_OUTPUT.PUT_LINE( 'NODE_numbers ---' );
	FOR Lcntr IN 1..NODE_numbers.count
	LOOP
	   DBMS_OUTPUT.PUT_LINE( NODE_numbers(Lcntr) );
	END LOOP;
		DBMS_OUTPUT.PUT_LINE( 'n: ' || NODE_numbers.count );
END IF;

END;

    -- Restore logging
	ALTER TABLE ROADWAY				LOGGING;
	ALTER TABLE ROAD_NAME 			LOGGING;
	ALTER TABLE LINK				LOGGING;
	ALTER TABLE LINEAR_LOCATION 	LOGGING;
	ALTER TABLE ROADWAY_POINT 		LOGGING;
	ALTER TABLE CALIBRATION_POINT	LOGGING;
	ALTER TABLE NODE 				LOGGING;
	ALTER TABLE JUNCTION_POINT 		LOGGING;
	ALTER TABLE JUNCTION 			LOGGING;
	ALTER TABLE NODE_POINT 			LOGGING;

    --Restore constraint
	ALTER TABLE JUNCTION_POINT 		ENABLE constraint JUNCTION_POINT_FK1;


